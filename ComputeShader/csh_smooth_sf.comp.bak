#version 430 core
//可分离的滤波

layout( local_size_x=48, local_size_y=48 ) in;
layout ( rgba32f, binding = 0 ) uniform  image2D image_pic;
layout ( rgba32f, binding = 1 ) uniform  image2D image_out;
uniform int width_pic,height_pic,nearbyorder;
uniform bool isRow;
shared float scanline[2000];
int K =1; 

void sf_ssmooth_column()
{
	if (gl_WorkGroupID.x < width_pic && gl_LocalInvocationIndex < height_pic)
	{
		ivec2 pos = ivec2(gl_WorkGroupID.x,gl_LocalInvocationIndex);
		vec4  cur_clr =imageLoad(image_out,pos);  //intensity,ave
		scanline[pos.y] = cur_clr.y;  // ave
		barrier();
		
		int k= K;
		k=K;
		int i,j,hp,wp;
		float sum=.0f;
		for (i=-k;i<=k;i++)
		{
			hp = i + pos.y;
			hp = clamp(hp,0,height_pic-1);			
			cur_clr.y =scanline[hp];
			sum += cur_clr.y;
		}
		float ave = sum/(k*2+1);
		imageStore(image_out,pos,vec4(cur_clr.x,ave,0,0));
	}
}

void sf_ssmooth_row()
{
	if (gl_WorkGroupID.x < height_pic && gl_LocalInvocationIndex < width_pic)
	{
		ivec2 pos = ivec2(gl_LocalInvocationIndex,gl_WorkGroupID.x);
		vec4  cur_clr =imageLoad(image_pic,pos);  // rgba
		float intensity ;
		intensity = 0.2989 * cur_clr.x + 0.5870 * cur_clr.y + 0.1140 * cur_clr.z;  // gray
		scanline[pos.x] = intensity;
		barrier();
		
		int k= K;
		k=K;
		int i,j,wp;
		float sum=.0f;
		for (i=-k;i<=k;i++)
		{
			wp = i + pos.x;
			wp = clamp(wp,0,width_pic-1);
			cur_clr.x =scanline[wp];
			sum += cur_clr.x;
		}
		float ave = sum/(k*2+1);
		imageStore(image_out,pos,vec4(intensity,ave,0,0));
	}
}

void main()
{
	//2017-03-03 14:11:45
	// 平滑
	
	K = nearbyorder;
				
		//common_smooth();
	if (isRow)
		sf_ssmooth_row();
	else
		sf_ssmooth_column();
			
}


