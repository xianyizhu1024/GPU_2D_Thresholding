#version 430 core
layout( local_size_x=16, local_size_y=8 ) in;

layout ( rgba32f, binding = 0 ) uniform  image2D image_pic;
layout ( r32ui,binding = 1) uniform  uimage2D image_bins;
//layout ( rgba32f, binding = 2 ) uniform  image2D image_out;
layout ( r32ui,binding = 3) uniform  uimage2D image_bins2d;
uniform int width_pic,height_pic;
uniform int grayscale;
int L; // (grayscale)
shared  uint bins2d_shared[256][48]; // d,h

void init_bins2d()
{
	ivec2 gridDim = ivec2(gl_NumWorkGroups.xy);
	ivec2 blockIdx = ivec2(gl_WorkGroupID.xy);
	
	ivec2 blockDim = ivec2(gl_WorkGroupSize.xy);
	ivec2 threadIdx = ivec2(gl_LocalInvocationID.xy);
	
	int bId = blockIdx.x + (blockIdx.y) * (gridDim.x);
    int tId = bId * (blockDim.x * blockDim.y) + (threadIdx.y * blockDim.x) + threadIdx.x; 
	
	L = grayscale;
	
	// three options to initialize image_bins2d:
	//		   option 1) default texes  are 0 in an image_bins2d that is created by the OpenGL instruction 'glGenTextures'; 
	// 		   option 2) set texes in an image_bins2d to 0  using the GLSL instruction 'imageAtomicExchange';
	// use	   option 3) imageStore uvec4(0).
	uint val_tmp;
	int i,L2=L*L,nt=(gridDim.x*gridDim.y)*(blockDim.x*blockDim.y);
	for (i=tId; i<L2; i+=nt){
		//val_tmp=imageAtomicExchange(image_bins2d,ivec2(i/L,i%L),0);
		imageStore(image_bins2d,ivec2(i/L,i%L),uvec4(0));
	}

}

void hist2d_g()
{
	uint row,col,x,y;
	uint gx,gy;
	gx = gl_GlobalInvocationID.x;
	gy = gl_GlobalInvocationID.y;
	uint nx = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
	uint ny = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
	
	// step 1:	initialize bins2d
	init_bins2d();
	barrier();
	
	// step 2:  account
	for (col = gx; col< width_pic; col+=nx){
		for (row = gy; row< height_pic; row+=ny){
			
			vec4	ccl =imageLoad(image_pic,ivec2(col,row));
			x = uint(ccl.r * ( L - 1 ) +0.5);
			y = uint(ccl.g * ( L - 1 )+0.5);
			
			imageAtomicAdd(image_bins2d,ivec2(x,y),1);
			
		}
	}
}

void hist2d_sg()
{
	// set by manual
	uint d=256,h=48,w=43,s=42,nthread=gl_WorkGroupSize.x * gl_WorkGroupSize.y; 
	
	//
	uint nx = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
	uint ny = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
	
	// step 1:  initialize bins2d_shared
	uint i,ntime,x,y,y1,val,offset;
	uint index,idx = gl_LocalInvocationIndex;
	ntime = uint( ceil(d*h/nthread));
	for (i=0;i<ntime;i++){
		index = idx + i*nthread;
		x = uint(index/h);
		y = index - x*h;
		if (x< d && y<h)
			bins2d_shared[x][y]=0;
	}
	
	// initialize image_bins2d 
	init_bins2d();
	barrier();	
	
 	// step 2:  account
	uint row,col;
	uint gx,gy;
	gx = gl_GlobalInvocationID.x;
	gy = gl_GlobalInvocationID.y;
	L = grayscale;
	
	for (col = gx; col< width_pic; col+=nx){
		for (row = gy; row< height_pic; row+=ny){
			
			vec4	ccl =imageLoad(image_pic,ivec2(col,row));
			x = uint(ccl.r * ( L - 1 ) +0.5);
			y = uint(ccl.g * ( L - 1 ) +0.5);
			offset = uint(x/w)*s;
			
			// y = clamp(y,offset, offset -1 + h);
			// y1 = y-	offset;
			// atomicAdd(bins2d_shared[x][y1],1);
			
			// account in shared memory
 			if (y>=offset && y<offset + h){
				y1 = y-	offset;
				atomicAdd(bins2d_shared[x][y1],1);
			}
			// account in global memory
			else{
				imageAtomicAdd(image_bins2d,ivec2(x,y),1);	
			}
			//imageAtomicAdd(image_bins2d,ivec2(x,y),1);
			
		}
	}
	barrier();

 	// step 3: copy shared to global
	for (i=0;i<ntime;i++){
		index = idx + i*nthread;
		x = uint(index/h);
		y1 = index - x*h;
		offset = uint(x/w)*s;
		y = y1+ offset;
		if (x< d && y1<h){
			val = bins2d_shared[x][y1];
			imageAtomicAdd(image_bins2d,ivec2(x,y),val);
		}
	}
}

void main()
{
	//hist2d_g();

	hist2d_sg();
}