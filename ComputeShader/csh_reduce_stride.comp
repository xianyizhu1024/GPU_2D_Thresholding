#version 430 core
layout( local_size_x=16,local_size_y=16 ) in;
layout ( rgba32f, binding = 0 ) uniform  image2D image_criteria;
layout ( rgba32f, binding = 1 ) uniform  image2D image_most;
uniform int threads1;
uniform int stride;
shared vec4 tmp[16][16];
void main()
{
	if ( gl_GlobalInvocationID.x <threads1 && gl_GlobalInvocationID.y< threads1)
	{
		bool is1channel=true;
		ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
		vec4 a,b,c,d,ret1,ret2;
		int i,j;
		ret1 = imageLoad(image_criteria,pos * stride);
		for (i=0;	i<stride;	i++){
			for (j=0;	j<stride;	j++){
				ret2 = imageLoad(image_criteria, pos*stride + ivec2(i,j) );
				//tmp[i][j] = ret2;
				if (is1channel){	  // otsu
					if (ret1.x < ret2.x)
						ret1 = ret2;
				}
				else{ //entropy-based
					if (ret1.w < ret2.w)
						ret1 = ret2;
				}
			}
		}	
		/* for (i=0;	i<stride;	i++){
			for (j=0;	j<stride;	j++){
				ret2 = tmp[i][j];
				if (is1channel){	  // otsu
					if (ret1.x < ret2.x)
						ret1 = ret2;
				}
				else{ //entropy-based
					if (ret1.w < ret2.w)
						ret1 = ret2;
				}
			}
		} */	
			
		imageStore(image_most,pos,ret1);
	}


}
